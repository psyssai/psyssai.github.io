<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on PSYda</title>
    <link>/categories/hugo/</link>
    <description>Recent content in Hugo on PSYda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>/blog/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/blog/pandasbasic_2_dataframe/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/pandasbasic_2_dataframe/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} 2. DataFrame DataFrame 이란?
  2차원 데이터   인덱스가 같은 하나 이상의 Series가 모여진 데이터   DBMS 의 관계형 Table 과 매우 유사   먼저 DataFrame을 사용하기 위해 Pandas 라이브러리를 import 합니다.
# pandas library import import pandas as pd from pandas import Series, DataFrame  2.1 DataFrame 데이터 생성 DataFrame을 생성하기 위해 셀에 DataFrame() 이라고 입력하고 괄호 안에서 Shift+tab 을 눌러보면 아래와 같은 정보가 보입니다.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/blog/pandasbasic_3_dataframe_merge/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/pandasbasic_3_dataframe_merge/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} import pandas as pd from pandas import Series, DataFrame  3. DataFrame Join Join 이란? - 두 개의 DataFrame을 합치는 것 - 열기준 컬럼명으로 합치기 : merge - 열기준 Index명로 합치기 : merge, concat - 행기준으로 합치기 : concat, append
합치는 방법은? - Inner : 두 DataFrame의 기준 컬럼에서 둘 다 존재하는 데이터만 Join - Left Outer join : 왼쪽 DataFrame으로 합치기 - Right Outer Join : 오른쪽 DataFrame으로 합치기 - Outer Join : 두 DataFrame의 모든 Data를 합치기</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/blog/pandasbasic_4_dataframe_fileio/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/pandasbasic_4_dataframe_fileio/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} import pandas as pd from pandas import Series, DataFrame  4. Pandas 파일 입출력 Pandas로 입출력 할 수 있는 파일 포맷은 매우 다양하지만 대표적으로 아래와 같습니다.
 CSV, Excel, HTML, JSON 등  이번에는 CSV 및 Excel File을 입출력하는 방법을 알아보겠습니다.
예제에 사용하기 위한 데이터를 확보하기 위해 kaggle에서 fifa19 선수 Dataset(https://www.kaggle.com/karangadiya/fifa19)을 다운로드 받았으며, 실습에 사용하기 위해 변형하였습니다.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/blog/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/hugoisforlovers/</guid>
      <description>&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo releases&lt;/a&gt; and download the
appropriate version for your os and architecture.&lt;/p&gt;

&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;

&lt;p&gt;More complete instructions are available at &lt;a href=&#34;/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/blog/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/migrate-from-jekyll/</guid>
      <description>&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>