<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas on PSYda</title>
    <link>/pandas/</link>
    <description>Recent content in Pandas on PSYda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/pandas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>/pandas/pandasbasic_1_series/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pandas/pandasbasic_1_series/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} 1. Series Series란?
  1차원 데이터   Index + Value 로 구성(Python의 사전데이터와 유사)   먼저 Series 나 DataFrame을 사용하기 위해 Pandas 라이브러리를 import 해야겠죠?(설치는 이전 블로그를 참고해주세요.)
# pandas library import import pandas as pd from pandas import Series, DataFrame  1.1 Series 데이터 생성  Python 자료형으로 생성가능(리스트, 튜플, 사전) numpy array 자료형으로 생성가능  1.</description>
    </item>
    
    <item>
      <title></title>
      <link>/pandas/pandasbasic_2_dataframe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pandas/pandasbasic_2_dataframe/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} 2. DataFrame DataFrame 이란?
  2차원 데이터   인덱스가 같은 하나 이상의 Series가 모여진 데이터   DBMS 의 관계형 Table 과 매우 유사   먼저 DataFrame을 사용하기 위해 Pandas 라이브러리를 import 합니다.
# pandas library import import pandas as pd from pandas import Series, DataFrame  2.1 DataFrame 데이터 생성 DataFrame을 생성하기 위해 셀에 DataFrame() 이라고 입력하고 괄호 안에서 Shift+tab 을 눌러보면 아래와 같은 정보가 보입니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>/pandas/pandasbasic_3_dataframe_merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pandas/pandasbasic_3_dataframe_merge/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} import pandas as pd from pandas import Series, DataFrame  3. DataFrame Join Join 이란? - 두 개의 DataFrame을 합치는 것 - 열기준 컬럼명으로 합치기 : merge - 열기준 Index명로 합치기 : merge, concat - 행기준으로 합치기 : concat, append
합치는 방법은? - Inner : 두 DataFrame의 기준 컬럼에서 둘 다 존재하는 데이터만 Join - Left Outer join : 왼쪽 DataFrame으로 합치기 - Right Outer Join : 오른쪽 DataFrame으로 합치기 - Outer Join : 두 DataFrame의 모든 Data를 합치기</description>
    </item>
    
    <item>
      <title></title>
      <link>/pandas/pandasbasic_4_dataframe_fileio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pandas/pandasbasic_4_dataframe_fileio/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} import pandas as pd from pandas import Series, DataFrame  4. Pandas 파일 입출력 Pandas로 입출력 할 수 있는 파일 포맷은 매우 다양하지만 대표적으로 아래와 같습니다.
 CSV, Excel, HTML, JSON 등  이번에는 CSV 및 Excel File을 입출력하는 방법을 알아보겠습니다.
예제에 사용하기 위한 데이터를 확보하기 위해 kaggle에서 fifa19 선수 Dataset(https://www.kaggle.com/karangadiya/fifa19)을 다운로드 받았으며, 실습에 사용하기 위해 변형하였습니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>/pandas/pandasbasic_5_dataframe_arithmeticoperation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pandas/pandasbasic_5_dataframe_arithmeticoperation/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} import pandas as pd from pandas import Series, DataFrame import numpy as np  5.Pandas DataFrame 산술 연산 DataFrame 의 연산은 아래의 두 가지 케이스가 있다. - DataFrame vs DataFrame 연산 - DataFrame vs Series 연산
5.1 DataFrame vs DataFrame 연산 DataFrame의 연산 규칙은 아래와 같다. - 같은 index 이면서 같은 column 명을 가진 두 value를 연산함 - 같은 index 이면서 같은 column 명을 가진 두 value 중 하나라도 NaN이 있으면 NaN으로 채워진다.</description>
    </item>
    
    <item>
      <title></title>
      <link>/pandas/pandasbasic_6_dataframe_statistic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pandas/pandasbasic_6_dataframe_statistic/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} import pandas as pd from pandas import Series, DataFrame import numpy as np  6.Pandas DataFrame 통계 DataFrame의 주요한 통계 함수는 아래와 같다. - Describe : 전체 주요 통계량 출력 - sum : 합계 출력 - cumsum : 누적합계 출력 - mean : 평균값 출력 - Std : 표준 편차 출력 - var : 분산 출력 - median : 중앙값 출력 - count : 데이터 개수 출력 - min, max, idxmin, idxmax : 최소값,최대값,최소값의 index, 최대값의 index 출력 - corr, cov : 상관계수, 공분산 출력</description>
    </item>
    
    <item>
      <title></title>
      <link>/pandas/pandasbasic_7_dataframe_sort_rank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pandas/pandasbasic_7_dataframe_sort_rank/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} import pandas as pd from pandas import Series, DataFrame import numpy as np  7. DataFrame의 sort, rank 함수  sort 함수 : 데이터를 정렬하는 함수(sort_values, sort_index) rank 함수 : 데이터의 순위를 매기는 함수  7.1 DataFrame의 sort DataFrame에서는 sort를 index 및 column 기준으로 sort를 할 수 있다. - sort_values(axis = 0) : 열방향 정렬(default) - sort_values(axis = 1) : 행방향 정렬 - sort_index(axis = 0) : 인덱스명 정렬(defualt) - sort_index(axis = 1) : 컬럼명 정렬</description>
    </item>
    
    <item>
      <title></title>
      <link>/pandas/pandasbasic_8_pandas_apply_function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pandas/pandasbasic_8_pandas_apply_function/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} import pandas as pd from pandas import Series , DataFrame  8. Series와 DataFrame에 외부 함수 적용하기  map 함수 : Series에서 사용하며 모든 요소에 함수 일괄 적용 apply 함수 : DataFrame에서 사용하며 각각의 행 또는 열(Series)에 함수 일괄 적용 applymap 함수 : DataFrame에서 사용하며 모든 요소에 함수 일괄 적용  8.</description>
    </item>
    
    <item>
      <title></title>
      <link>/pandas/pandasbasic_9_dataframe_groupingfunction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pandas/pandasbasic_9_dataframe_groupingfunction/</guid>
      <description># 블로그에 포스팅하기 위한 스타일 조정 from IPython.core.display import display, HTML display(HTML(&amp;quot;&amp;lt;style&amp;gt; .container{width:90% !important;}&amp;lt;/style&amp;gt;&amp;quot;))   .container{width:90% !important;} import pandas as pd from pandas import Series , DataFrame import numpy as np  9. DataFrame의 집계함수 DataFrame을 집계할 수 있는 함수에는 아래 두가지가 있음 - groupby - pivot_table
9.1 groupby 함수 groupby 함수를 사용한 집계 연산은 두 단계로 이루어짐 - DataFrame을 그룹별로 나누는 단계 - 나누어진 그룹에서 집계 함수(sum, mean, max 등)를 수행하는 단계 Data Loading</description>
    </item>
    
  </channel>
</rss>